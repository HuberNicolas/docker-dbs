version: '3'

services:
  mariadb:
    container_name: mariadb
    build:
      context: ./mariadb
      dockerfile: dev.Dockerfile
    restart: always
    ports:
      - "3307:3306"
    environment:
    # You could also use "MARIADB_" instead of "MYSQL_"
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./mariadb/mysql-data/:/var/lib/mysql
      - ./mariadb/mock-data/init.sql:/docker-entrypoint-initdb.d/init.sql
      #- ./mariadb/mock-data/dump.sql:/docker-entrypoint-initdb.d/dump.sql
    networks:
      - db_network
  
  phpmyadmin:
    container_name: phpmyadmin
    build:
      context: ./mariadb/phpmyadmin
      dockerfile: dev.Dockerfile
    restart: unless-stopped
    ports:
      - "8082:80"
    environment:
      PMA_ARBITRARY: ${PMA_ARBITRARY}
    depends_on:
      - mariadb
    networks:
      - db_network


  # PostgreSQL
  postgres:
    container_name: postgres
    build:
      context: ./postgres
      dockerfile: dev.Dockerfile   
    restart: always
    ports:
      - "5433:5432"
    # Set environment variables directly in the docker-compose file
    environment:
      # The only variable required is `POSTGRES_PASSWORD`, the rest are optional
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    # Set envrionment variables based on the .env file
    env_file:
      - .env
    volumes:
      - ./postgres/postgres-data/:/var/lib/postgresql/data # to have access to the pg-files
      - ./postgres/mock-data/init.sql:/docker-entrypoint-initdb.d/init.sql # to create the initial data
    networks:
      - db_network
  
  pgadmin:
    container_name: pgadmin
    build:
      context: ./postgres/pgadmin
      dockerfile: dev.Dockerfile
    restart: unless-stopped
    ports:
      - "5051:80"
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - ./postgres/pgadmin/pgadmin-data:/var/lib/pgadmin # to have access to the pgadmin-files
    depends_on:
      - postgres
    networks:
      - db_network


# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
# docker network create db_network
networks:
  db_network:
    external: true